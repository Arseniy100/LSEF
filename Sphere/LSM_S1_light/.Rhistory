# Length scales: L0, L1, L2
dd = abs(xx_km - xx_km[nmax])
LL0_t = c(1:nx) ; LL0_s = LL0_t ; LL0_l = LL0_t
for (ix in 1:nx){
row     = C[ix,]
row_cov = B[ix,]
if(l_CRL_COV_plots == 1){
row4plot = row
}else if(l_CRL_COV_plots == 2){
row4plot = row_cov
}
alignedRow = symm_cvm_row(row4plot, nx, ix) # for plotting
aligned_C[ix,] = alignedRow
alignedRow = symm_cvm_row(row, nx, ix)      # for len scales evaluation
LL0_t[ix] = sum( abs(alignedRow)*dx_km ) /2                # macro scale
row     = CS_lcz[ix,]
row_cov = S_lcz[ix,]
if(l_CRL_COV_plots == 1){
row4plot = row
}else if(l_CRL_COV_plots == 2){
row4plot = row_cov
}
alignedRow = symm_cvm_row(row4plot, nx, ix)
aligned_CS_lcz[ix,] = alignedRow
alignedRow = symm_cvm_row(row, nx, ix)
LL0_s[ix] = sum( abs(alignedRow)*dx_km ) /2                # macro scale
row     = C_LSM[ix,]
row_cov = B_LSM[ix,]
if(l_CRL_COV_plots == 1){
row4plot = row
}else if(l_CRL_COV_plots == 2){
row4plot = row_cov
}
alignedRow = symm_cvm_row(row4plot, nx, ix)
aligned_C_LSM[ix,] = alignedRow
alignedRow = symm_cvm_row(row, nx, ix)
LL0_l[ix] = sum( abs(alignedRow)*dx_km ) /2                # macro scale
}
# Plot len scales
if(i_repl == n_repl){
mx=max(LL0_t, LL0_s, LL0_l)
plot(LL0_t, ylim=c(0,mx), main = "Macro scale: true (black), \n S_lcz (blue), LSM (red)", type="l")
lines(LL0_s, col="blue")
lines(LL0_l, col="red")
}
aaligned_C_Ms[i_repl,]       = apply(aligned_C,      2, mean) # truth
aaligned_C_LSM_MEs[i_repl,]  = apply(aligned_C_LSM - aligned_C,  2, mean)
aaligned_C_LSM_AEs[i_repl,]  = apply(aligned_C_LSM - aligned_C,  2, ExAbs)
aaligned_CS_lcz_MEs[i_repl,] = apply(aligned_CS_lcz - aligned_C, 2, mean)
aaligned_CS_lcz_AEs[i_repl,] = apply(aligned_CS_lcz - aligned_C, 2, ExAbs)
#-------------------------
# Monotonicity of crl C_LSM
ix_c = nmax
eps=3e-2
n_nmon = c(1:nx)
for (ix in 1:nx){
row = C_LSM[ix,]
alignedRow = symm_cvm_row(row, nx, ix)
# left half
ind = 2:ix_c
growth = alignedRow[ind] > alignedRow[ind-1] - eps
# right half
ind = ix_c:(nx-1)
decay = alignedRow[ind] > alignedRow[ind+1] - eps
n_nmon[ix] = sum(!growth) + sum(!decay)
}
nn_nmon[i_repl] = sum(n_nmon)
#---------------------
# Matrix err norms
err_Frob_LSM[i_repl]   = norm(B_LSM-B, type = "F") / norm(B, type = "F")
err_Frob_S_lcz[i_repl] = norm(S_lcz-B, type = "F") / norm(B, type = "F")
RelBias_Diag_LSM[i_repl]   = mean(diag(B_LSM-B)) / mean(diag(B))
RelBias_Diag_S_lcz[i_repl] = mean(diag(S_lcz-B)) / mean(diag(B))
RelMSE_Diag_LSM[i_repl]   = mean(diag( (B_LSM-B)^2 )) / mean(diag(B^2))
RelMSE_Diag_S_lcz[i_repl] = mean(diag( (S_lcz-B)^2 )) / mean(diag(B^2))
#------------------------------------------------------------------
#------------------------------------------------------------------
# ANLS
# Perform the secondary KF's anls with:
#
# B_specified = B_true
# B_specified = S_lcz
# B_specified = B_LSM
#
# And compute the 3 respective anls-err cvms A
# A = (I-KH) B_true (I-KH)^T + K R K^T
# (B_true is B in this program)
#----------------------------------
# Preparations to the ANLS
# FG=0
x_f = c(1:nx) ;  x_f[] =0
# Generate truth using the true fcst-err mdl: xi=W*N(0,I):
# x_true = x_f - e_f = -xi (minus the FG error)
# Since the CVM of xi is B=W*W^T, we simulate xi as
# xi=W*gau_N01, whr gau_N01 is the N(0,I) noise
gau_N01 = rnorm(nx, mean=0, sd=1)
xi = W %*% gau_N01
x_true = -xi
# Specify obs-err SD
var_FG_err = median(diag(B))
sd_obs = sd_obs_rel_FG * sqrt(var_FG_err)
#--------------
# Generate OBS: x_obs, H, R
OBS = gen_obs(x_true, n_obs, sd_obs, repeated_obs_location)
H = OBS$H
R = OBS$R
x_obs = OBS$x_obs
#----------------------------------
# ANLS
ANLS_opt = lin_determ_anls(as.matrix(x_f), as.matrix(x_obs), H, B, R, B)
ANLS_LSM = lin_determ_anls(as.matrix(x_f), as.matrix(x_obs), H, B_LSM, R, B)
ANLS_S   = lin_determ_anls(as.matrix(x_f), as.matrix(x_obs), H, S, R, B)
ANLS_lcz = lin_determ_anls(as.matrix(x_f), as.matrix(x_obs), H, S_lcz, R, B)
ANLS_med = lin_determ_anls(as.matrix(x_f), as.matrix(x_obs), H, B_median, R, B)
# plot(diag(ANLS_opt$A), type="l")
# lines(diag(ANLS_LSM$A), col="red")
# lines(diag(ANLS_lcz$A), col="blue")
# lines(diag(ANLS_S$A), col="green")
#
# plot((ANLS_opt$X_a), type="l")
# lines(x_true, lty=2, col="gold")
# lines((ANLS_LSM$X_a), col="red")
# lines((ANLS_lcz$X_a), col="blue")
# lines((ANLS_S$X_a), col="green")
#----------------------------------
# store anls-err stats
ms_anls_err_Banls_isB_true[i_repl] = Ex2(ANLS_opt$X_a - x_true)
ms_anls_err_Banls_isB_LSM [i_repl] = Ex2(ANLS_LSM$X_a - x_true)
ms_anls_err_Banls_isS_lcz[i_repl]  = Ex2(ANLS_lcz$X_a - x_true)
ms_anls_err_Banls_isB_med[i_repl]  = Ex2(ANLS_med$X_a - x_true)
Amx_diag_Banls_isB_true[i_repl] = mean(diag(ANLS_opt$A))
Amx_diag_Banls_isB_LSM [i_repl] = mean(diag(ANLS_LSM$A))
Amx_diag_Banls_isS_lcz [i_repl] = mean(diag(ANLS_lcz$A))
Amx_diag_Banls_isB_med [i_repl] = mean(diag(ANLS_med$A))
# plot(x_true)
# lines(ANLS_opt$X_a)
# lines(ANLS_LSM$X_a, col="red")
# lines(ANLS_lcz$X_a, col="blue")
#
# plot(ANLS_lcz$X_a - x_true, col="blue", type="l")
# lines(ANLS_LSM$X_a - x_true, col="red")
# #lines(ANLS_opt$X_a - x_true)
#
# plot(abs(ANLS_lcz$X_a - x_true) - abs(ANLS_LSM$X_a - x_true), col="blue", type="l")
# abline(h=0)
# mean(abs(ANLS_lcz$X_a - x_true) - abs(ANLS_LSM$X_a - x_true), col="blue", type="l") / mean(abs(ANLS_lcz$X_a - x_true))
#------------------------------------------------------------------
} # end of n_repl BIG external LOOP
#---------------------------------------------------------
#---------------------------------------------------------
# Calibration: the averaged spat-ave crf & spectrum
if(CALIBRATE){
crf_Msr = crf_SrMs / n_repl
plot(crf_Msr, main="crf_Msr")
lines(crf_median_1D, main="crf_median_1D")
b_from_crf_Msr = fft(crf_Msr, inverse = FALSE) / nx
max(abs(Im(b_from_crf_Msr)))
b_from_crf_Msr = Re(b_from_crf_Msr)
b_from_crf_Msr_nrm = b_from_crf_Msr / b_from_crf_Msr[1]
plot(b_from_crf_Msr_nrm, main="b_from_crf_Msr_nrm")
lines(b_median_1D_nrm, main="b_median_1D_nrm")
b_from_crf_Msr_nrm_half = b_from_crf_Msr_nrm[1:nmaxp1]
# Smoo the space-and-"time" mean spectrum, additionally, over n
nsweep=0
b_shape_estm = ThreePointSmoo_segment(b_from_crf_Msr_nrm_half, nsweep, maintainMx = FALSE)
inm=nmax/3
plot(b_shape_estm[1:inm], main="b_shape_estm (circ), median")
lines(b_median_1D_nrm[1:inm])
stop("Calibration run OK")
}
# Learn the neural network
# Data to learn from:
#
# TrueSpectra  = array(0, dim=c(nmaxp1, nx_thinned, n_repl))
# EnsmBandVars = array(0, dim=c(nband,  nx_thinned, n_repl))
if(LEARN){
}
#---------------------------------------------------------
# OVERALL STATS
# Mean field variances: tue & ensm
xi_Vt_Msr = mean(xi_Vt_Ms)
xi_Ve_Msr = mean(xi_Ve_Ms)
xi_Ve_AEsr   = mean(xi_Ve_AEs)
xi_Ve_TAD_Msr = mean(xi_Ve_TAD_Ms)
#=======================================
# Mean cvms of  phi
Test_cvm_phi = F
if(Test_cvm_phi){
Gamma_true_Msr   = apply(GGamma_true_Ms[,,],   c(1,2), mean)
cvm_phi_estm_Msr = apply(ccvm_phi_estm_Ms[,,], c(1,2), mean)
mn = min(Gamma_true_Msr, cvm_phi_estm_Msr)
mx = max(Gamma_true_Msr, cvm_phi_estm_Msr)
image2D(Gamma_true_Msr, main="Gamma_true_Msr", zlim=c(mn,mx))
image2D(cvm_phi_estm_Msr, main="cvm_phi_estm_Msr", zlim=c(mn,mx))
image2D(cvm_phi_estm_Msr - Gamma_true_Msr, main="cvm_phi_estm_Msr - Gamma_true_Msr")
rel_err = norm(cvm_phi_estm_Msr - Gamma_true_Msr, type = "F") /
norm(Gamma_true_Msr, type = "F")
bias = diag(cvm_phi_estm_Msr - Gamma_true_Msr)
mn=min(diag(Gamma_true_Msr), bias)
mx=max(diag(Gamma_true_Msr), bias)
plot(diag(Gamma_true_Msr), type="l", ylim=c(mn,mx), main="True band variances")
lines(bias, col="red")
abline(h=0)
rel_bias = bias / diag(Gamma_true_Msr)
plot(rel_bias)
message("rel_err estm Gamma_true: ", signif(rel_err,2))
}
#=======================================
# ANLS stats
# (1) A-mx (anls-err CVM) based stats
tt=Amx_diag_Banls_isB_true
ll=Amx_diag_Banls_isB_LSM
ss=Amx_diag_Banls_isS_lcz
vv=Amx_diag_Banls_isB_med
if(n_repl > 1){
mx=max(max(ss-ll),0)
mn=min(min(ss-ll),0)
plot(ss-ll, ylim=c(mn,mx), type="l", col="red",
xlab="Replicate number", ylab="S_lcz anls-err std   MINUS   LSM anls-err std",
main="anls_DE(S_lcz) - anls_DE(B_LSM) \n(Difference of anls-err std for the 2 anls)")
abline(h=0)
}
t=sqrt(mean(tt))
l=sqrt(mean(ll))
s=sqrt(mean(ss))
v=sqrt(mean(vv))
anls_err_Btrue = t
anls_err_LSM = l
anls_err_enkf = s
anls_err_3dv = v
REE_S_lcz =(l-t)/(s-t)
REE_B_med =(l-t)/(v-t)
# sampling error std: bootstrap
n_boo = 1000
rs_boo = c(1:n_boo) # init
rv_boo = c(1:n_boo) # init
for (i in 1:n_boo){
ii_boo = sample(c(1:n_repl), n_repl, replace = TRUE)
t=sqrt(mean(tt[ii_boo]))
l=sqrt(mean(ll[ii_boo]))
s=sqrt(mean(ss[ii_boo]))
v=sqrt(mean(vv[ii_boo]))
rs_boo[i] = (l-t)/(s-t)
rv_boo[i] = (l-t)/(v-t)
}
REE_S_lcz_samplNoise = sd(rs_boo)
REE_B_med_samplNoise = sd(rv_boo)
#-----------------------
# (2) Sample based stats
tt = ms_anls_err_Banls_isB_true
ll = ms_anls_err_Banls_isB_LSM
ss = ms_anls_err_Banls_isS_lcz
vv = ms_anls_err_Banls_isB_med
t=sqrt(mean(tt))
l=sqrt(mean(ll))
s=sqrt(mean(ss))
v=sqrt(mean(vv))
REE_S_lcz_MCarlo =(l-t)/(s-t)
REE_B_med_MCarlo =(l-t)/(v-t)
for (i in 1:n_boo){
ii_boo = sample(c(1:n_repl), n_repl, replace = TRUE)
t=sqrt(mean(tt[ii_boo]))
l=sqrt(mean(ll[ii_boo]))
s=sqrt(mean(ss[ii_boo]))
rs_boo[i] = (l-t)/(s-t)
rv_boo[i] = (l-t)/(v-t)
}
REE_S_lcz_MCarlo_samplNoise = sd(rs_boo)
REE_B_med_MCarlo_samplNoise = sd(rv_boo)
#=======================================
# BANDSPACE stats
# 1) errors
band_Ve_MEs_Mr = apply(bband_Ve_MEs, 2, mean) # mean band_Ve
band_Ve_AEs_Mr = apply(bband_Ve_AEs, 2, mean) # ave band_Ve MAE over n_repl
band_Vt_Ms_Mr  = apply(bband_Vt_Ms,  2, mean) # mean band_Vt
band_Ve_TD_Msr = apply(bband_Ve_TD_Ms, 2, mean) # mean band_Ve theor SD
band_Ve_TAD_Msr= apply(bband_Ve_TAD_Ms, 2, mean) # mean band_Ve theor MD
nb=nband/1
band_Ve_MEs_Mr_rel_Mb  = mean(band_Ve_MEs_Mr[1:nb])  / mean(band_Vt_Ms_Mr[1:nb])
band_Ve_AEs_Mr_rel_Mb  = mean(band_Ve_AEs_Mr[1:nb])  / mean(band_Vt_Ms_Mr[1:nb])
band_Ve_TAD_Msr_rel_Mb = mean(band_Ve_TAD_Msr[1:nb]) / mean(band_Vt_Ms_Mr[1:nb])
band_V_restored_AEs_Mr = apply(bband_V_restored_AEs, 2, mean)
band_V_restored_MEs_Mr = apply(bband_V_restored_MEs, 2, mean)
mn = min(band_Vt_Ms_Mr, band_Ve_AEs_Mr, band_Ve_MEs_Mr, band_V_restored_AEs_Mr, band_V_restored_MEs_Mr)
mx = max(band_Vt_Ms_Mr, band_Ve_AEs_Mr, band_Ve_MEs_Mr, band_V_restored_AEs_Mr, band_V_restored_MEs_Mr)
namefile=paste0("./Out/BandVeErr_nr", n_repl, "u", crftype, "ne", ne, "kapp", kappa,
"NSL", NSL, ".png")
png(namefile, width=7.48, height=5.47, units = "in", res=300)
par(mgp=c(2.5, 1, 0))
plot(band_Vt_Ms_Mr, type="l", xlab = "band", ylab = "Band variances",
main=paste0(
"Band variances V: Truth,  Errors (MAE and bias) MAD(Ve) \n",
" Ensm and Restored from b_LSM \n",
"u=", crftype, " ne=", ne, " NSL=",NSL, " kappa=", kappa, " nr=", n_repl),
sub=paste0(
"Band-mean relative ensm MAE=", signif(band_Ve_AEs_Mr_rel_Mb,3),
"  Rel bias=", signif(band_Ve_MEs_Mr_rel_Mb,3)),
ylim=c(mn,mx), col="black", lwd=2)
lines(band_Ve_AEs_Mr, col="orange", lwd=1.5)
lines(band_Ve_MEs_Mr, col="springgreen4", lwd=1.5)
lines(band_V_restored_AEs_Mr, col="orange", lty=2)
lines(band_V_restored_MEs_Mr, col="springgreen4", lty=2)
lines(band_Ve_TAD_Msr, col="green", lty=3, lwd=3)
abline(h=0, lty=3)
leg.txt<-c('Truth', 'Ensm, MAE', 'Ensm, bias', 'Restored, MAE', 'Restored, bias', 'MAD(Ve)')
leg.col<-c("black", "orange", "springgreen4", "orange", "springgreen4", "green")
legend("topright", inset=0, leg.txt, col=leg.col,
lwd=c(2,1.5,1.5,1,1,3), lty=c(1,1,1,2,2,3), pch=c(NA,NA,NA,NA,NA),
pt.lwd=3, cex=1.3, pt.cex=1, bg="white")
dev.off()
# 2) Misfit of restored band_V with band_Ve
bband_V_restored_misfit_As_Mr = apply(bband_V_restored_misfit_As, 2, mean)
bband_V_restored_misfit_Ms_Mr = apply(bband_V_restored_misfit_Ms, 2, mean)
band_Ve_TAD_Ms_Mr = apply(bband_Ve_TAD_Ms, 2, mean)
mn = min(bband_V_restored_misfit_As_Mr, bband_V_restored_misfit_Ms_Mr, band_Ve_TAD_Ms_Mr, band_Vt_Ms_Mr)
mx = max(bband_V_restored_misfit_As_Mr, bband_V_restored_misfit_Ms_Mr, band_Ve_TAD_Ms_Mr, band_Vt_Ms_Mr)
namefile=paste0("./Out/BandVeMisfit_nr", n_repl, "u", crftype, "ne", ne, "kapp", kappa,
"NSL", NSL, ".png")
png(namefile, width=7.48, height=5.47, units = "in", res=300)
par(mgp=c(2.5, 1, 0))
plot(band_Vt_Ms_Mr, type="l", xlab = "Band", ylab = "Error",
main=paste0(
"Band vars misfits [V_restored - Ve]: MAD (red), bias (blu) \n",
"True V (black). Sampling error MD(Ve-V_true) (orng) \n",
"u=", crftype, "ne=", ne, " NSL=",NSL, " kappa=", kappa, " nr=", n_repl),
sub=paste0("NB: Misfit MAE should be comparable to RMS(Ve-V_true)"),
ylim=c(mn,mx), col="black")
lines(bband_V_restored_misfit_As_Mr, col="red")
lines(bband_V_restored_misfit_Ms_Mr, col="blue")
lines(band_Ve_TAD_Ms_Mr, col="orange")
abline(h=0, lty=3)
dev.off()
#=======================================
# SPECTRAL-SPACE stats (LSM) :  Bias, MAE
b_true_Ms_Mr   = apply(bb_true_Ms, 2, mean)
b_LSM_MEs_Mr   = apply(b_LSM_MEs, 2, mean)
b_true_Ms_Mr_Sw = sum(b_true_Ms_Mr)
b_LSM_MEs_Mr_SAw = sum(abs(b_LSM_MEs_Mr))
b_LSM_AEs_Mr = apply(b_LSM_AEs, 2, mean)
b_LSM_AEs_Mr_Sw = sum(b_LSM_AEs_Mr)
nm=nmax/6
mx = max(b_LSM_MEs_Mr[1:nm], b_LSM_AEs_Mr[1:nm], b_true_Ms_Mr[1:nm])
mn = min(b_LSM_MEs_Mr[1:nm], b_LSM_AEs_Mr[1:nm], b_true_Ms_Mr[1:nm])
namefile=paste0("./Out/SpeErr_", "u", crftype, "ne", ne, "nr", n_repl, "kapp", kappa,
"NSL", NSL, ".png")
png(namefile, width=7.48, height=5.47, units = "in", res=300)
par(mgp=c(2.5, 1, 0))
plot(b_true_Ms_Mr[1:nm], type="l", ylim=c(mn,mx), col="black", lwd=2,
main=paste0( "Spectral-space statistics",
"\n u=", crftype, " ne=", ne, " NSL=",NSL, " kappa=", kappa, " nr=", n_repl ),
xlab="n+1", ylab = "Spectral variances",
sub=paste0( "Total (sum abs): LSM  bias=", signif(b_LSM_MEs_Mr_SAw,3),
"  MAE=", signif(b_LSM_AEs_Mr_Sw,3),
"   Truth=Var(xi)=", signif(b_true_Ms_Mr_Sw,3) ))
lines(b_LSM_AEs_Mr[1:nm], col="red", lwd=1.5)
lines(b_LSM_MEs_Mr[1:nm], col="red", lty=2, lwd=1.5)
leg.txt<-c('Truth', 'LSM, MAE', "LSM, bias")
leg.col<-c("black", "red", "red")
legend("topright", inset=0, leg.txt, col=leg.col,
lwd=c(2,1.5,1.5), lty=c(1,1,2), pch=c(NA,NA,NA),
pt.lwd=3, cex=1.3, pt.cex=1, bg="white")
abline(h=0, lty=3)
dev.off()
#=======================================
# PHYSICAL-SPACE stats: Correlations: Bias, MAE
aligned_C_Ms_Mr      = apply(aaligned_C_Ms, 2, mean)
aligned_C_LSM_MEs_Mr = apply(aaligned_C_LSM_MEs, 2, mean)
aligned_C_LSM_AEs_Mr = apply(aaligned_C_LSM_AEs, 2, mean)
aligned_CS_lcz_MEs_Mr = apply(aaligned_CS_lcz_MEs, 2, mean)
aligned_CS_lcz_AEs_Mr = apply(aaligned_CS_lcz_AEs, 2, mean)
RelMAE_Diag_LSM = sqrt(mean(RelMSE_Diag_LSM))
RelMAE_Diag_S_lcz = sqrt(mean(RelMSE_Diag_S_lcz))
nonmonot_crl_points_per_i_repl = sum(nn_nmon) / n_repl
# Aligned crfs
nx_mid = round(nx/2)
Dx_align=floor(L_xi_median *10 / dx)
if(Dx_align >= nx/2) Dx_align = floor(nx/2)-1
nx2_align=nx_mid + Dx_align
xx_align = c(0:Dx_align) * dx_km
# CRL Bias & MAE -- averaged over the plotted range of distances
bias_crl_LSM   = mean(aligned_C_LSM_MEs_Mr[nx_mid:nx2_align])
bias_crl_S_lcz = mean(aligned_CS_lcz_MEs_Mr[nx_mid:nx2_align])
MAE_crl_LSM   = mean(aligned_C_LSM_AEs_Mr[nx_mid:nx2_align])
MAE_crl_S_lcz = mean(aligned_CS_lcz_AEs_Mr[nx_mid:nx2_align])
mn=min(aligned_C_Ms_Mr[nx_mid:nx2_align], aligned_C_LSM_MEs_Mr[nx_mid:nx2_align], aligned_CS_lcz_MEs_Mr[nx_mid:nx2_align])
mx=max(aligned_C_Ms_Mr[nx_mid:nx2_align], aligned_C_LSM_MEs_Mr[nx_mid:nx2_align], aligned_CS_lcz_MEs_Mr[nx_mid:nx2_align])
if(l_CRL_COV_plots == 1){
namefile=paste0("./Out/CrlErr_", "u", crftype, "_B2S_", B2S_method, "_ne", ne, "nr", n_repl, "kapp", kappa,
"NSL", NSL, ".png")
}else if(l_CRL_COV_plots == 2){
namefile=paste0("./Out/CovErr_", "u", crftype, "_B2S_", B2S_method, "_ne", ne, "nr", n_repl, "kapp", kappa,
"NSL", NSL, ".png")
}
png(namefile, width=7.48, height=5.47, units = "in", res=300)
par(mgp=c(2.5, 1, 0))
if(l_CRL_COV_plots == 1){
plot(x=xx_align,
y=aligned_C_Ms_Mr[nx_mid:nx2_align], type="l", lwd=2, ylim=c(mn,mx),
main=paste0("Spatial correlations\n",
"u=", crftype, " B2S=", B2S_method, " ne=", ne, " NSL=",NSL, " kappa=", kappa, " nr=", n_repl),
xlab="Distance, km", ylab="Correlation",
sub=paste0("Rel variance errors: Bias. LSM: ", signif(mean(RelBias_Diag_LSM),3),
"  S_lcz:", signif(mean(RelBias_Diag_S_lcz),3),
".  MAE. LSM: ",signif(RelMAE_Diag_LSM,3), ".  S_Lcz: ",signif(RelMAE_Diag_S_lcz,3)))
}else if(l_CRL_COV_plots == 2){
plot(x=xx_align,
y=aligned_C_Ms_Mr[nx_mid:nx2_align], type="l", lwd=2, ylim=c(mn,mx),
main=paste0("Spatial covariances\n",
"u=", crftype, " B2S=", B2S_method, " ne=", ne, " NSL=",NSL, " kappa=", kappa, " nr=", n_repl),
xlab="Distance, km", ylab="Correlation",
sub=paste0("Rel variance errors: Bias. LSM: ", signif(mean(RelBias_Diag_LSM),3),
"  S_lcz:", signif(mean(RelBias_Diag_S_lcz),3),
".  MAE. LSM: ",signif(RelMAE_Diag_LSM,3), ".  S_Lcz: ",signif(RelMAE_Diag_S_lcz,3)))
}
lines(x=xx_align, y=aligned_C_LSM_AEs_Mr[nx_mid:nx2_align], col="red", lwd=1.5)
lines(x=xx_align, y=aligned_CS_lcz_AEs_Mr[nx_mid:nx2_align], col="blue", lwd=1.5)
lines(x=xx_align, y=aligned_C_LSM_MEs_Mr[nx_mid:nx2_align], col="red", lwd=1.5, lty=2)
lines(x=xx_align, y=aligned_CS_lcz_MEs_Mr[nx_mid:nx2_align], col="blue", lwd=1.5, lty=2)
abline(h=0, lty=3)
leg.txt<-c('Truth', 'LSM, MAE', 'S_lcz, MAE', 'LSM, bias', 'S_lcz, bias')
leg.col<-c("black", "red", "blue", "red", "blue")
legend("topright", inset=0, leg.txt, col=leg.col,
lwd=c(2, 1.5, 1.5, 1.5, 1.5), lty=c(1,1,1,2,2), pch=c(NA,NA,NA,NA,NA),
pt.lwd=3, cex=1.3, pt.cex=1, bg="white")
abline(h=0, lty=3)
dev.off()
#-------------------------------------------------------------------
#-------------------------------------------------------------------
message("Sample MAE(xi_Ve) = ", signif(xi_Ve_AEsr,5),
"  Theor MD(xi_Ve) = ", signif(xi_Ve_TAD_Msr,5),
" (need be really close in STATIO only)")
message("BANDSPACE: Rel. bias = ", signif(band_Ve_MEs_Mr_rel_Mb,3),
"  Rel MAE =",  signif(band_Ve_AEs_Mr_rel_Mb,3),
"   Rel theor MAD =",  signif(band_Ve_TAD_Msr_rel_Mb,3))
if(B2S_method == "SVshape") {
message("rel_err_discard_nullspace_b = ",
signif(rel_err_discard_nullspace_b,3))
}
message("SPE-SPACE: \n LSM:  Bias: ", signif(b_LSM_MEs_Mr_SAw,3),
"  MAE: ", signif(b_LSM_AEs_Mr_Sw,3),
"  Truth=", signif(b_true_Ms_Mr_Sw,3),
"   -- sums over spectrum")
message("PHYS-SPACE CRL Bias: \n S_lcz: ", signif(mean(bias_crl_S_lcz),3),
"  LSM: ", signif(mean(bias_crl_LSM),3))
message("PHYS-SPACE CRL MAE: \n S_lcz: ", signif(mean(MAE_crl_S_lcz),3),
"  LSM: ", signif(mean(MAE_crl_LSM),3))
message("nonmonot_crl_points_per_i_repl=", nonmonot_crl_points_per_i_repl)
message("PHYS-SPACE Rel Variance Bias: \n S_lcz: ", signif(mean(RelBias_Diag_S_lcz),3),
"  LSM: ", signif(mean(RelBias_Diag_LSM),3))
message("PHYS-SPACE Vars MAE:  \n S_lcz: ", signif(RelMAE_Diag_S_lcz,3),
"  LSM: ", signif(RelMAE_Diag_LSM,3))
message("seed=", seed)
message("Anls RMSE:  LSM: ", signif(anls_err_LSM,3),
"  EnKF: ", signif(anls_err_enkf,3),
"  3DV: ", signif(anls_err_3dv,3),
"  KF: ", signif(anls_err_Btrue,3),
"   fg_err (rough): ", signif(sd_xi,3)
)
if(kappa > 1 & NSL < 1e3)
message("   Rm :  diag(A): ",signif(REE_B_med,3),
"   M-Carlo: ",signif(REE_B_med_MCarlo,3))
if(kappa > 1 & NSL < 1e3 & n_repl > 1)
message("---SD(Rm):  diag(A):  ",signif(REE_B_med_samplNoise,1),
"   M-Carlo: ",signif(REE_B_med_MCarlo_samplNoise,1))
message("   Rs :  diag(A): ",signif(REE_S_lcz,3),
"   M-Carlo: ",signif(REE_S_lcz_MCarlo,3))
if(n_repl > 1)
message("---SD(Rs):  diag(A):  ",signif(REE_S_lcz_samplNoise,1),
"   M-Carlo: ",signif(REE_S_lcz_MCarlo_samplNoise,1))
source("C:/Users/user410/Python/lsm_s2/LSM_S1_light/locStatio_mp.R", echo=TRUE)
B2S_method
B2S_method
source("C:/Users/user410/Python/lsm_s2/LSM_S1_light/locStatio_mp.R", echo=TRUE)
install.packages("torch")
torch_tensor(1, device = "cuda")
# install.packages("torch")
library(torch)
torch_tensor(1, device = "cuda")
# install.packages("torch")
install_torch()
torch_tensor(1, device = "cuda")
install.packages("torch")
install.packages("torch")
# install_torch()
library(torch)
torch_tensor(1, device = "cuda")
install.packages("luz")
# install_torch()
library(torch)
torch_tensor(1, device = "cuda")
torch_tensor(1)
sessionInfo()
install.packages("torch")
# install_torch()
library(torch)
install.packages("installr")
updateR()
# install_torch()
library(installr)
updateR()
# install_torch()
library(torch)
torch_tensor(1)
install_torch()
install.packages("LibTorch")
install.packages("LibLantern")
torch_tensor(1)
library(LibTorch)
library(LibTorch)
library(LibLantern)
torch::install_torch()
torch_tensor(1)
